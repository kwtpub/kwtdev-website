import '../../../../App.css'
import HeaderIcons from '../../../../components/HeaderIcons';
import './Matrix.css'
import { createProgressManager } from '../../../../services/progress';
import { useState, useEffect } from 'react';

function Matrix() {
  const [progressManager] = useState(() => createProgressManager());
  const [topics, setTopics] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializeData = async () => {
      try {
        await progressManager.initialize();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (totalLessons = 4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
        const topicConfigs = [
          {
            id: 1,
            name: '1.1. –ú–∞—Ç—Ä–∏—Ü—ã, –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –º–∞—Ç—Ä–∏—Ü–∞–º–∏',
            description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞',
            subTopics: [
              { id: '1-1', name: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è' },
              { id: '1-2', name: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏' },
              { id: '1-3', name: '–°–≤–æ–π—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π' },
              { id: '1-4', name: '–ú–∞—Ç—Ä–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π' }
            ]
          },
          {
            id: 2,
            name: '1.2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞',
            description: '–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–π',
            subTopics: [
              { id: '2-1', name: '–ü–æ–Ω—è—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—è. –ú–∏–Ω–æ—Ä—ã –∏ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è' },
              { id: '2-2', name: '–°–≤–æ–π—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–π' }
            ]
          },
          {
            id: 3,
            name: '1.3. –°–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π. –ü—Ä–∞–≤–∏–ª–æ –ö—Ä–∞–º–µ—Ä–∞',
            description: '–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π',
            subTopics: [
              { id: '3-1', name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π' },
              { id: '3-2', name: '–ü—Ä–∞–≤–∏–ª–æ –ö—Ä–∞–º–µ—Ä–∞' }
            ]
          },
          {
            id: 4,
            name: '1.4. –ú–µ—Ç–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã',
            description: '–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É',
            subTopics: [
              { id: '4-1', name: '–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã' },
              { id: '4-2', name: '–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π' }
            ]
          },
          {
            id: 5,
            name: '1.5. –ú–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞',
            description: '–ú–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
            subTopics: [
              { id: '5-1', name: '–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã' },
              { id: '5-2', name: '–ú–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π' },
              { id: '5-3', name: '–†–∞–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ã. –¢–µ–æ—Ä–µ–º–∞ –ö—Ä–æ–Ω–µ–∫–µ—Ä–∞-–ö–∞–ø–µ–ª–ª–∏' },
              { id: '5-4', name: '–û–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã' }
            ]
          }
        ];

        topicConfigs.forEach(config => {
          // totalLessons = 4 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
          progressManager.getOrCreateTopic(config.id, config.name, 4, config.subTopics);
        });

        const topicsData = progressManager.getDisplayData();
        const statsData = progressManager.getStats();
        
        setTopics(topicsData);
        setStats(statsData);
        setLoading(false);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProgressManager:', error);
        setLoading(false);
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      }
    };

    initializeData();
  }, [progressManager]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleToggleRepetition = async (topicId, interval, isCompleted) => {
    try {
      let success;
      if (isCompleted) {
        // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –æ—Ç–º–µ–Ω—è–µ–º
        success = await progressManager.uncompleteRepetition(topicId, interval);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º
        success = await progressManager.completeRepetition(topicId, interval);
      }
      
      if (success) {
        const updatedTopics = progressManager.getDisplayData();
        const updatedStats = progressManager.getStats();
        setTopics(updatedTopics);
        setStats(updatedStats);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:', error);
    }
  };

  const handleToggleSubTopicTheory = async (topicId, subTopicId) => {
    try {
      await progressManager.toggleSubTopicTheory(topicId, subTopicId);
      const updatedTopics = progressManager.getDisplayData();
      setTopics(updatedTopics);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏:', error);
    }
  };

  const handleToggleSubTopicPractice = async (topicId, subTopicId) => {
    try {
      await progressManager.toggleSubTopicPractice(topicId, subTopicId);
      const updatedTopics = progressManager.getDisplayData();
      setTopics(updatedTopics);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏:', error);
    }
  };

  // –í–†–ï–ú–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
  const handleResetProgress = async () => {
    if (window.confirm('‚ö†Ô∏è –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ–±–Ω–æ–≤–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
      try {
        await progressManager.resetAll();
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...');
        window.location.reload();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error);
      }
    }
  };

  const getStatusText = (status) => {
    switch(status) {
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
      case 'current': return '–¢–µ–∫—É—â–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'
      case 'upcoming': return '–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç'
      default: return '–ù–µ –Ω–∞—á–∞—Ç–æ'
    }
  }

  const getStatusClass = (status) => {
    switch(status) {
      case 'completed': return 'status-completed'
      case 'current': return 'status-current'
      case 'upcoming': return 'status-upcoming'
      default: return 'status-default'
    }
  }

  if (loading) {
    return (
      <div className="portfolio-root">
        <HeaderIcons />
        <div className="title-container">
          <h2>–ú–∞—Ç—Ä–∏—Ü—ã</h2>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="portfolio-root">
      <HeaderIcons />
      <div className="title-container">
        <h2>–ú–∞—Ç—Ä–∏—Ü—ã</h2>
        <h4 className="description-title">–¢—Ä–µ–∫–µ—Ä –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –ø–æ –∫—Ä–∏–≤–æ–π –≠–±–±–∏–Ω–≥–∞—É–∑–∞</h4>
        
        {/* –í–†–ï–ú–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã */}
        <button 
          onClick={handleResetProgress}
          style={{
            padding: '10px 20px',
            marginBottom: '20px',
            background: 'rgba(255, 100, 100, 0.2)',
            border: '1px solid rgba(255, 100, 100, 0.5)',
            borderRadius: '8px',
            color: '#fff',
            cursor: 'pointer',
            fontSize: '0.9rem'
          }}
        >
          üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        </button>
        
        {stats && (
          <div className="stats-container">
            <div className="stat-card">
              <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
              <div className="stat-grid">
                <div className="stat-item">
                  <span className="stat-number">{stats.total}</span>
                  <span className="stat-label">–í—Å–µ–≥–æ —Ç–µ–º</span>
                </div>
                <div className="stat-item">
                  <span className="stat-number">{stats.completed}</span>
                  <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                </div>
                <div className="stat-item">
                  <span className="stat-number">{stats.inProgress}</span>
                  <span className="stat-label">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</span>
                </div>
                <div className="stat-item">
                  <span className="stat-number">{stats.readyForRepetition}</span>
                  <span className="stat-label">–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é</span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="topics-container">
          {topics.map((topic) => (
            <div className="topic-block" key={topic.id}>
              <div className="topic-header">
                <div className="topic-info">
                  <h3 className="topic-title">{topic.name}</h3>
                  <p className="topic-description">–¢–µ–º–∞ –ø–æ –ª–∏–Ω–µ–π–Ω–æ–π –∞–ª–≥–µ–±—Ä–µ</p>
                </div>
                <div className="topic-status">
                  <span className={`status-badge ${getStatusClass(topic.practiceStatus)}`}>
                    {getStatusText(topic.practiceStatus)}
                  </span>
                </div>
              </div>
              
              <div className="progress-section">
                <div className="progress-info-header">
                  <h4 className="progress-title">–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</h4>
                  <div className="progress-stats">
                    <span className="progress-count">{topic.completedLessons}/{topic.totalLessons}</span>
                    <span className="progress-percentage">{topic.progress}%</span>
                  </div>
                </div>
                <div className="progress-bar-container">
                  <div className="progress-bar">
                    <div 
                      className="progress-fill" 
                      style={{width: `${topic.progress}%`}}
                    ></div>
                  </div>
                </div>
              </div>

              <div className="practice-section">
                <h4 className="practice-title">–ù–∞–∂–º–∏—Ç–µ –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</h4>
                <div className="repetitions-grid">
                  {topic.repetitions.map((rep, index) => (
                    <button
                      key={index}
                      className={`repetition-card ${rep.completed ? 'completed' : 'pending'}`}
                      onClick={() => handleToggleRepetition(topic.id, rep.key, rep.completed)}
                      title={rep.completed ? '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å' : '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'}
                    >
                      <div className="repetition-icon">
                        {rep.completed ? '‚úì' : '‚óã'}
                      </div>
                      <div className="repetition-info">
                        <span className="repetition-label">{rep.interval}</span>
                        <span className="repetition-status">
                          {rep.completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                        </span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              {topic.subTopics && topic.subTopics.length > 0 && (
                <div className="subtopics-section">
                  <h4 className="subtopics-title">–ü–æ–¥–ø—É–Ω–∫—Ç—ã —Ç–µ–º—ã</h4>
                  <div className="subtopics-list">
                    {topic.subTopics.map((subTopic) => (
                      <div key={subTopic.id} className="subtopic-item">
                        <div className="subtopic-name">{subTopic.name}</div>
                        <div className="subtopic-checkboxes">
                          <button
                            className={`subtopic-checkbox ${subTopic.theory.completed ? 'checked' : ''}`}
                            onClick={() => handleToggleSubTopicTheory(topic.id, subTopic.id)}
                            title="–¢–µ–æ—Ä–∏—è"
                          >
                            <span className="checkbox-icon">{subTopic.theory.completed ? '‚úì' : ''}</span>
                            <span className="checkbox-label">–¢–µ–æ—Ä–∏—è</span>
                          </button>
                          <button
                            className={`subtopic-checkbox ${subTopic.practice.completed ? 'checked' : ''}`}
                            onClick={() => handleToggleSubTopicPractice(topic.id, subTopic.id)}
                            title="–ü—Ä–∞–∫—Ç–∏–∫–∞"
                          >
                            <span className="checkbox-icon">{subTopic.practice.completed ? '‚úì' : ''}</span>
                            <span className="checkbox-label">–ü—Ä–∞–∫—Ç–∏–∫–∞</span>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Matrix;
