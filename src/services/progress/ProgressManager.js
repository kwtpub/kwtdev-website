import { TopicProgress } from './TopicProgress.js';
import { RepetitionScheduler } from './RepetitionScheduler.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ Netlify Blobs —á–µ—Ä–µ–∑ Edge Function)
 */
export class ProgressManager {
  constructor() {
    this.scheduler = new RepetitionScheduler();
    this.topics = new Map();
    this.isInitialized = false;
    this.apiUrl = '/api/blobs';
    this.useBlobsAPI = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    this.checkAPI();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Blobs API
   */
  async checkAPI() {
    try {
      if (typeof window !== 'undefined') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ localhost (–≥–¥–µ Edge Functions –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          console.log('üìù –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏');
          this.useBlobsAPI = false;
        } else {
          // –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Edge Function API
          this.useBlobsAPI = true;
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Netlify Blobs —á–µ—Ä–µ–∑ Edge Function');
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error.message);
      this.useBlobsAPI = false;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Blobs
   */
  async initialize() {
    if (this.isInitialized) return;

    try {
      // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
      if (!this.useBlobsAPI) {
        console.log('üìù –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏)');
        this.isInitialized = true;
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Edge Function
      const response = await fetch(`${this.apiUrl}?key=topics`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success && result.data) {
        const topicsData = JSON.parse(result.data);
        topicsData.forEach(topicData => {
          const topic = TopicProgress.fromJSON(topicData);
          this.topics.set(topic.topicId, topic);
        });
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${topicsData.length} —Ç–µ–º –∏–∑ Netlify Blobs`);
      } else {
        console.log('üìù –î–∞–Ω–Ω—ã—Ö –≤ Blobs –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      }
      
      this.isInitialized = true;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Blobs, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ø–∞–º—è—Ç–∏:', error.message);
      this.isInitialized = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Blobs
   */
  async save() {
    // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (!this.useBlobsAPI) {
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏');
      return;
    }

    try {
      const topicsData = Array.from(this.topics.values()).map(topic => topic.toJSON());
      
      const response = await fetch(`${this.apiUrl}?key=topics`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          data: JSON.stringify(topicsData)
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Netlify Blobs');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Blobs:', error.message);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É
   */
  getOrCreateTopic(topicId, topicName, totalLessons = 0, subTopics = []) {
    if (!this.topics.has(topicId)) {
      const topic = new TopicProgress(topicId, topicName, totalLessons, subTopics);
      this.topics.set(topicId, topic);
      this.save(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    }
    return this.topics.get(topicId);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫
   */
  async completeLesson(topicId) {
    const topic = this.topics.get(topicId);
    if (topic && topic.completeLesson()) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ (—É–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å)
   */
  async uncompleteLesson(topicId) {
    const topic = this.topics.get(topicId);
    if (topic && topic.uncompleteLesson()) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
   */
  async completeRepetition(topicId, interval) {
    const topic = this.topics.get(topicId);
    if (topic && topic.completeRepetition(interval)) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
   */
  async uncompleteRepetition(topicId, interval) {
    const topic = this.topics.get(topicId);
    if (topic && topic.uncompleteRepetition(interval)) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é –ø–æ–¥–ø—É–Ω–∫—Ç–∞
   */
  async toggleSubTopicTheory(topicId, subTopicId) {
    const topic = this.topics.get(topicId);
    if (topic && topic.toggleSubTopicTheory(subTopicId)) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ–¥–ø—É–Ω–∫—Ç–∞
   */
  async toggleSubTopicPractice(topicId, subTopicId) {
    const topic = this.topics.get(topicId);
    if (topic && topic.toggleSubTopicPractice(subTopicId)) {
      await this.save();
      return true;
    }
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã
   */
  getAllTopics() {
    return Array.from(this.topics.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –ø–æ ID
   */
  getTopic(topicId) {
    return this.topics.get(topicId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–º
   */
  getDisplayData() {
    return Array.from(this.topics.values()).map(topic => topic.getDisplayData());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
   */
  getTopicsReadyForRepetition() {
    return this.scheduler.getTopicsReadyForRepetition(this.getAllTopics());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats() {
    return this.scheduler.getRepetitionStats(this.getAllTopics());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  getRecommendations() {
    return this.scheduler.getStudyRecommendations(this.getAllTopics());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã
   */
  getTimeUntilNextRepetition(topicId) {
    const topic = this.topics.get(topicId);
    if (!topic) return null;
    return this.scheduler.getTimeUntilNextRepetition(topic);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã
   */
  needsRepetition(topicId) {
    const topic = this.topics.get(topicId);
    return topic ? topic.needsRepetition() : false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ–º—ã
   */
  getNextRepetitionInterval(topicId) {
    const topic = this.topics.get(topicId);
    return topic ? topic.getNextRepetitionInterval() : null;
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async resetTopic(topicId) {
    this.topics.delete(topicId);
    await this.save();
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async resetAll() {
    this.topics.clear();
    await this.save();
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  exportData() {
    return {
      topics: Array.from(this.topics.values()).map(topic => topic.toJSON()),
      stats: this.getStats(),
      recommendations: this.getRecommendations(),
      exportedAt: new Date().toISOString()
    };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async importData(data) {
    try {
      if (data.topics && Array.isArray(data.topics)) {
        this.topics.clear();
        data.topics.forEach(topicData => {
          const topic = TopicProgress.fromJSON(topicData);
          this.topics.set(topic.topicId, topic);
        });
        await this.save();
        return true;
      }
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }
}